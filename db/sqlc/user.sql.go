// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO users (
    user_name,
    first_name,
    last_name,
    email,
    hashed_password
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING user_id, user_name, first_name, last_name, email, hashed_password, created_at, updated_at
`

type CreateUsersParams struct {
	UserName       string `json:"user_name"`
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRow(ctx, createUsers,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUsers, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT  
    u.user_id,
    u.user_name,
    u.first_name,
    u.last_name,
    u.email,
    u.created_at,
    u.updated_at
FROM users u
WHERE u.user_id = $1 
LIMIT 1
`

type GetUserRow struct {
	UserID    int64     `json:"user_id"`
	UserName  string    `json:"user_name"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetUser(ctx context.Context, userID int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserID = `-- name: GetUserID :one
SELECT  
    u.user_id,
    u.user_name,
    u.first_name,
    u.last_name,
    u.email,
    u.created_at,
    u.updated_at
FROM users u
LEFT JOIN image_conversions p ON p.user_id = u.user_id
WHERE u.user_id = $1 
LIMIT 1
`

type GetUserIDRow struct {
	UserID    int64     `json:"user_id"`
	UserName  string    `json:"user_name"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetUserID(ctx context.Context, userID int64) (GetUserIDRow, error) {
	row := q.db.QueryRow(ctx, getUserID, userID)
	var i GetUserIDRow
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT user_id, user_name, first_name, last_name, email, hashed_password, created_at, updated_at FROM users
WHERE user_name = $1 LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRow(ctx, getUsers, userName)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUsers = `-- name: UpdateUsers :one
UPDATE users
SET
    user_name = COALESCE($1, user_name),
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    email = COALESCE($4, email),
    hashed_password = COALESCE($5, hashed_password),
    updated_at = COALESCE($6, updated_at)
WHERE 
    user_id = $7
RETURNING user_id, user_name, first_name, last_name, email, hashed_password, created_at, updated_at
`

type UpdateUsersParams struct {
	UserName       pgtype.Text        `json:"user_name"`
	FirstName      pgtype.Text        `json:"first_name"`
	LastName       pgtype.Text        `json:"last_name"`
	Email          pgtype.Text        `json:"email"`
	HashedPassword pgtype.Text        `json:"hashed_password"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	UserID         int64              `json:"user_id"`
}

func (q *Queries) UpdateUsers(ctx context.Context, arg UpdateUsersParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUsers,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.HashedPassword,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
