// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: image.sql

package db

import (
	"context"
)

const createImageConversion = `-- name: CreateImageConversion :one
INSERT INTO image_conversions (
    user_id,
    image_name,
    extracted_text
) VALUES (
    $1, $2, $3
) RETURNING conversion_id, user_id, image_name, extracted_text, created_at, updated_at
`

type CreateImageConversionParams struct {
	UserID        int32  `json:"user_id"`
	ImageName     string `json:"image_name"`
	ExtractedText string `json:"extracted_text"`
}

func (q *Queries) CreateImageConversion(ctx context.Context, arg CreateImageConversionParams) (ImageConversion, error) {
	row := q.db.QueryRow(ctx, createImageConversion, arg.UserID, arg.ImageName, arg.ExtractedText)
	var i ImageConversion
	err := row.Scan(
		&i.ConversionID,
		&i.UserID,
		&i.ImageName,
		&i.ExtractedText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteImageConversion = `-- name: DeleteImageConversion :exec
DELETE FROM image_conversions
WHERE conversion_id = $1
`

func (q *Queries) DeleteImageConversion(ctx context.Context, conversionID int32) error {
	_, err := q.db.Exec(ctx, deleteImageConversion, conversionID)
	return err
}

const getImageConversionByID = `-- name: GetImageConversionByID :one
SELECT 
    conversion_id,
    user_id,
    image_name,
    extracted_text,
    created_at,
    updated_at
FROM image_conversions
WHERE conversion_id = $1
LIMIT 1
`

func (q *Queries) GetImageConversionByID(ctx context.Context, conversionID int32) (ImageConversion, error) {
	row := q.db.QueryRow(ctx, getImageConversionByID, conversionID)
	var i ImageConversion
	err := row.Scan(
		&i.ConversionID,
		&i.UserID,
		&i.ImageName,
		&i.ExtractedText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getImageConversionsByUser = `-- name: GetImageConversionsByUser :many
SELECT 
    conversion_id,
    user_id,
    image_name,
    extracted_text,
    created_at,
    updated_at
FROM image_conversions
WHERE user_id = $1
`

func (q *Queries) GetImageConversionsByUser(ctx context.Context, userID int32) ([]ImageConversion, error) {
	rows, err := q.db.Query(ctx, getImageConversionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ImageConversion{}
	for rows.Next() {
		var i ImageConversion
		if err := rows.Scan(
			&i.ConversionID,
			&i.UserID,
			&i.ImageName,
			&i.ExtractedText,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImageConversion = `-- name: UpdateImageConversion :one
UPDATE image_conversions
SET
    image_name = COALESCE($2, image_name),
    extracted_text = COALESCE($3, extracted_text),
    updated_at = NOW()
WHERE conversion_id = $1
RETURNING conversion_id, user_id, image_name, extracted_text, created_at, updated_at
`

type UpdateImageConversionParams struct {
	ConversionID  int32  `json:"conversion_id"`
	ImageName     string `json:"image_name"`
	ExtractedText string `json:"extracted_text"`
}

func (q *Queries) UpdateImageConversion(ctx context.Context, arg UpdateImageConversionParams) (ImageConversion, error) {
	row := q.db.QueryRow(ctx, updateImageConversion, arg.ConversionID, arg.ImageName, arg.ExtractedText)
	var i ImageConversion
	err := row.Scan(
		&i.ConversionID,
		&i.UserID,
		&i.ImageName,
		&i.ExtractedText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
